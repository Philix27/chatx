generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = "file:./dev.db"
  url      = env("DATABASE_URL")
}

model Book {
  id         String             @id @default(uuid())
  title      String
  desc       String?
  img_url    String?
  created_at DateTime?          @default(now())
  updated_at DateTime?          @updatedAt
  chapters   BookChapter[]
  topic      BookChapterTopic[]
}

model BookChapter {
  id         String             @id @default(uuid())
  title      String
  subtitle   String?
  book_id    String?
  created_at DateTime?          @default(now())
  updated_at DateTime?          @updatedAt
  book       Book?              @relation(fields: [book_id], references: [id])
  topics     BookChapterTopic[]
}

model BookChapterTopic {
  id          String       @id @default(uuid())
  title       String
  content     String?
  video_url   String?
  created_at  DateTime?    @default(now())
  updated_at  DateTime?    @updatedAt
  book_id     String?
  // content_blocks ContentBlock[]
  book        Book?        @relation(fields: [book_id], references: [id])
  chapter_id  String?
  chapter     BookChapter? @relation(fields: [chapter_id], references: [id])
  tags        Tags[]
  quiz_topics QuizTopic[]
}

model QuizTopic {
  id          String             @id @default(uuid())
  created_at  DateTime?          @default(now())
  updated_at  DateTime?          @updatedAt
  title       String
  desc        String
  tags        Tags[]
  quizes      Quiz[]
  book_topics BookChapterTopic[]
}

model Quiz {
  id           String      @id @default(uuid())
  question     String
  option1      String
  option2      String
  option3      String?
  option4      String?
  option5      String?
  option6      String?
  answer_index Int
  answer       String?
  created_at   DateTime?   @default(now())
  updated_at   DateTime?   @updatedAt
  quiz_topics  QuizTopic[]
}

model Blog {
  id         String    @id @default(uuid())
  title      String
  subtitle   String?
  img_url    String?
  video_url  String?
  story      String
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  tags       Tags[]
}

model Tags {
  id          String             @id @default(uuid())
  title       String
  subtitle    String?
  img_url     String?
  created_at  DateTime?          @default(now())
  updated_at  DateTime?          @updatedAt
  blogs       Blog[]
  book_topics BookChapterTopic[]
  quiz_topics QuizTopic[]
}

model user {
  id              String         @id @default(uuid())
  walletAddress   String         @unique
  email           String
  isEmailVerified Boolean        @default(false)
  phone           String?
  isPhoneVerified Boolean        @default(false)
  bvn             String?
  isBvnVerified   Boolean        @default(false)
  nin             String?
  isNinVerified   Boolean        @default(false)
  dob             String?
  address1        String?
  address2        String?
  pin             String?
  created_at      DateTime?      @default(now())
  updated_at      DateTime?      @updatedAt
  bankAccounts    bank_account[]
  transactions    transactions[]
  p2pAds          p2p_ads[]
  direct_orders   direct_order[]
}

model bank_account {
  id          String    @id @default(uuid())
  bankName    String
  accountName String
  accountNo   String
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
  user_id     String?
  user        user?     @relation(fields: [user_id], references: [id])
}

model p2p_ads {
  id         String    @id @default(uuid())
  user_id    String?
  user       user?     @relation(fields: [user_id], references: [id])
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
}

model direct_order {
  id         String           @id @default(uuid())
  created_at DateTime?        @default(now())
  updated_at DateTime?        @updatedAt
  amount     Int
  user_id    String?
  user       user?            @relation(fields: [user_id], references: [id])
  status     QuickOrderStatus
}

enum QuickOrderStatus {
  PENDING
  COMPLETED
  FAILED
}

model transactions {
  id              String              @id @default(uuid())
  created_at      DateTime?           @default(now())
  updated_at      DateTime?           @updatedAt
  user_id         String?
  transactionHash String
  description     String
  user            user?               @relation(fields: [user_id], references: [id])
  category        TransactionCategory
  status          TransactionStatus
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CLOSED
}

enum TransactionCategory {
  P2P
  QUICK_SWAP
  AIRTIME
  WITHDRAW
  SEND
  RECEIVE
}

model rates {
  id         String     @id @default(uuid())
  created_at DateTime?  @default(now())
  updated_at DateTime?  @updatedAt
  currency   String
  symbol     String?
  amount     String
  status     RateStatus
}

enum RateStatus {
  BUY
  SELL
}

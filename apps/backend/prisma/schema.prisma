// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id              String         @id @default(uuid())
  walletAddress   String         @unique
  email           String
  isEmailVerified Boolean        @default(false)
  phone           String?
  isPhoneVerified Boolean        @default(false)
  bvn             String?
  isBvnVerified   Boolean        @default(false)
  nin             String?
  isNinVerified   Boolean        @default(false)
  dob             String?
  address1        String?
  address2        String?
  pin             String?
  created_at      DateTime?      @default(now())
  updated_at      DateTime?      @updatedAt
  bankAccounts    bank_account[]
  transactions    transactions[]
  p2pAds          p2p_ads[]
  direct_orders   direct_order[]
}

model bank_account {
  id         String    @id @default(uuid())
  name       String
  bankName   String
  accountNo  String
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  user_id    String?
  user       user?     @relation(fields: [user_id], references: [id])
}

model p2p_ads {
  id         String    @id @default(uuid())
  user_id    String?
  user       user?     @relation(fields: [user_id], references: [id])
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
}

model direct_order {
  id         String           @id @default(uuid())
  created_at DateTime?        @default(now())
  updated_at DateTime?        @updatedAt
  amount     Int
  user_id    String?
  user       user?            @relation(fields: [user_id], references: [id])
  status     QuickOrderStatus
}

enum QuickOrderStatus {
  PENDING
  COMPLETED
  FAILED
}

model transactions {
  id              String               @id @default(uuid())
  created_at      DateTime?            @default(now())
  updated_at      DateTime?            @updatedAt
  user_id         String?
  transactionhash String
  description     String
  user            user?                @relation(fields: [user_id], references: [id])
  category        TransaactionCategory
  status          TransactionStatus
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CLOSED
}

enum TransaactionCategory {
  P2P
  QUICK_SWAP
  AIRTIME
  WITHDRAW
  SEND
  RECEIVE
}

model rates {
  id         String    @id @default(uuid())
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  currency   String
  symbol     String?
}
